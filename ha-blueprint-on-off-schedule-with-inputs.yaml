# Blueprint metadata
blueprint:
  name: On-Off schedule with state persistence using input_datetime
  description: A simple on-off schedule, with the addition of state persistence across disruptive events, making sure the target device is always in the expected state.  Enable and set schedule using inputs in the front end.  (Based on "On-Off schedule with state persistence" by Matteo Agnoletto)
  source_url: https://github.com/brianewman/ha-blueprint-on-off-schedule-with-inputs/blob/main/ha-blueprint-on-off-schedule-with-inputs.yaml
  domain: automation
  input:
    enable_schedule:
      name: Enable schedule helper
      description: Enable the actions of the automation to set the ligtht's state. Select an input_boolean entity for this input.
      selector: 
        entity:
          domain: input_boolean
    automation_target:
      name: Automation target
      description: The target which the automation will turn on and off based on the provided schedule.
      selector:
        target:
    on_time:
      name: On Time helper
      description: Time when the target should be placed in the on state.  Select an input_datetime for this input.
      selector:
        entity:
          domain: input_datetime
    off_time:
      name: Off Time helper
      description: Time when the target should be placed in the off state.  Select an input_datetime for this input.
      selector:
        entity:
          domain: input_datetime
    custom_trigger_event:
      name: Custom Trigger Event
      description: (Optional) A custom event which can trigger the state check (eg. a powercut event reported by external integrations).
      default: ''
    trigger_at_homeassistant_startup:
      name: Trigger at Home Assistant startup
      description: Trigger the target state check and enforcement at Home Assistant startup.
      default: false
      selector:
        boolean:

# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  off_helper: !input off_time
  on_helper: !input on_time
  off_time: '{{ states.off_helper.attributes.timestamp }}'
  on_time: '{{ states.on_helper.attributes.timestamp }}'
  trigger_at_homeassistant_startup: !input trigger_at_homeassistant_startup
  # first define whether on_time or off_time is the first event to occur during a specific day
  first_event: '{{ on_time if on_time < off_time else off_time }}'
  second_event: '{{ on_time if on_time >= off_time else off_time }}'
mode: single
max_exceeded: silent

# trigger at specified time, home assistant startup or when the custom event is fired
trigger:
  - platform: time
    at:
      - !input on_time
      - !input off_time
  - platform: homeassistant
    event: start
  - platform: event
    event_type: !input custom_trigger_event
# if triggered by the homeassistant platform check if the automation should be run, as specified by the user
# if triggered by something else, just continue
condition:
  - condition: template
    value_template: '{{ trigger.platform!="homeassistant" or trigger_at_homeassistant_startup }}'
  - condition: state
    entity_id: !input enable_schedule
    state: 'on'
action:
  - choose:
      # if current time is in the range first_event...second_event the target must be in the first_event state
      - conditions:
          - condition: template
            value_template: '{{ now().time() >= first_event and now().time() < second_event }}'
        sequence:
          - service: 'homeassistant.{{ "turn_on" if first_event == on_time else "turn_off"}}'
            target: !input automation_target
    # else current time is in the range second_event...23:59:59 or 00:00:00...first_event
    # the target must be in the second_event state
    default:
      - service: 'homeassistant.{{ "turn_on" if second_event == on_time else "turn_off"}}'
        target: !input automation_target
